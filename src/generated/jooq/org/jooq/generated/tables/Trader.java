/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.TraderRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.trader</code>.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trader extends TableImpl<TraderRecord> {

    private static final long serialVersionUID = -551011774;

    /**
     * The reference instance of <code>public.trader</code>
     */
    public static final Trader TRADER = new Trader();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TraderRecord> getRecordType() {
        return TraderRecord.class;
    }

    /**
     * The column <code>public.trader.id</code>.
     */
    public final TableField<TraderRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.trader.name</code>.
     */
    public final TableField<TraderRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.trader.deleted</code>.
     */
    public final TableField<TraderRecord, Timestamp> DELETED = createField("deleted", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>public.trader</code> table reference
     */
    public Trader() {
        this(DSL.name("trader"), null);
    }

    /**
     * Create an aliased <code>public.trader</code> table reference
     */
    public Trader(String alias) {
        this(DSL.name(alias), TRADER);
    }

    /**
     * Create an aliased <code>public.trader</code> table reference
     */
    public Trader(Name alias) {
        this(alias, TRADER);
    }

    private Trader(Name alias, Table<TraderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trader(Name alias, Table<TraderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Trader(Table<O> child, ForeignKey<O, TraderRecord> key) {
        super(child, key, TRADER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRADER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TraderRecord> getPrimaryKey() {
        return Keys.TRADER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TraderRecord>> getKeys() {
        return Arrays.<UniqueKey<TraderRecord>>asList(Keys.TRADER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Trader as(String alias) {
        return new Trader(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Trader as(Name alias) {
        return new Trader(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trader rename(String name) {
        return new Trader(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trader rename(Name name) {
        return new Trader(name, null);
    }
}
